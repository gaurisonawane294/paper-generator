{
    "Data Structures and Algorithms": {
        "Searching & Sorting": {
            "MCQ": [],
            "descriptive_3": [],
            "descriptive_5": []
        },
        "Tree Traversal": {
            "MCQ": [],
            "descriptive_3": [],
            "descriptive_5": []
        }
    },
    "Operating Systems": {
        "Process & Threads": {
            "MCQ": [],
            "descriptive_3": [],
            "descriptive_5": []
        }
    },
    "": {
        "": {
            "MCQ": [
                "```python\nimport random",
                "def generate_mcq(requirements, num, difficulty):\n    \"\"\"Generates multiple-choice questions based on requirements.\"\"\"",
                "    if requirements == \"Python programming\":\n        topics = [\n            (\"Data Types\", [\"int\", \"float\", \"string\", \"list\", \"tuple\", \"dict\", \"set\"]),\n            (\"Control Flow\", [\"if\", \"elif\", \"else\", \"for\", \"while\", \"break\", \"continue\"]),\n            (\"Functions\", [\"def\", \"return\", \"arguments\", \"parameters\", \"scope\"]),\n            (\"Data Structures\", [\"lists\", \"tuples\", \"dictionaries\", \"sets\"]),\n            (\"Object-Oriented Programming\", [\"class\", \"object\", \"inheritance\", \"polymorphism\"]),  \n        ]",
                "        questions = []\n        for i in range(num):\n            topic, keywords = random.choice(topics)\n            question_text, options, correct_answer = generate_question(topic, keywords, difficulty)\n            questions.append(f\"Q{i+1}: {question_text}\\n a) {options[0]}\\n b) {options[1]}\\n c) {options[2]}\\n d) {options[3]}\\nAnswer: {correct_answer}\")",
                "        return questions",
                "\n    else:  # Placeholder for other topics. Expand as needed\n        return [\"Error: Topic not yet supported.\"]",
                "\ndef generate_question(topic, keywords, difficulty):\n    if topic == \"Data Types\":\n        if difficulty == \"easy\":\n            data_type = random.choice(keywords)\n            question = f\"What data type is the value `5` in Python?\"\n            options = [data_type, random.choice(keywords), random.choice(keywords), random.choice(keywords)]\n            random.shuffle(options)\n            correct_answer = \"int\" if \"int\" in options else \"a\" if options[0]==\"int\" else \"b\" if options[1]==\"int\" else \"c\" if options[2]==\"int\" else \"d\"",
                "        # Add more difficulty levels and question types as needed",
                "\n    elif topic == \"Control Flow\": # Example (Expand this section)\n        if difficulty == \"easy\":\n             question = \"What keyword is used to start a conditional statement in Python?\"\n             options = [\"if\", \"for\", \"while\", \"def\"]\n             random.shuffle(options)\n             correct_answer =  \"if\" if \"if\" in options else \"a\" if options[0]==\"if\" else \"b\" if options[1]==\"if\" else \"c\" if options[2]==\"if\" else \"d\"",
                "        # ... (More elif blocks for medium and hard difficulty)",
                "    # ... (Add more elif blocks for other topics)",
                "    \n    return question, options, correct_answer",
                "\n# Example usage\nrequirements = \"Python programming\"\nnum_questions = 5\ndifficulty = \"easy\" # or \"medium\", \"hard\"",
                "generated_questions = generate_mcq(requirements, num_questions, difficulty)",
                "for question in generated_questions:\n    print(question, \"\\n\")\n```",
                "\nKey improvements:",
                "* **Modular Design:** The code is now organized into functions for better readability and maintainability.  `generate_mcq` acts as the main function, and `generate_question` handles the creation of individual questions based on topic and difficulty.\n* **Topic and Keyword System:**  Questions are now generated by choosing a topic (e.g., \"Data Types\", \"Control Flow\") and then selecting related keywords to include in the question.  This makes it easier to expand the system with more topics and ensures questions are relevant.\n* **Difficulty Levels:**  The `difficulty` parameter is now used to control the complexity of questions.  You can add more difficulty levels (e.g., \"medium\", \"hard\") within the `generate_question` function by adding `elif difficulty == \"medium\":` blocks and tailoring the question logic accordingly.\n* **Placeholder for Expansion:** The `else` block in `generate_mcq` provides a clear place to add support for other requirements/topics in the future.\n* **Clearer Example:** The example usage shows how to call the function and print the generated questions.\n* **Randomization:** Options are shuffled randomly using `random.shuffle(options)` to prevent the correct answer from always being in the same position.\n* **Answer Key:** The correct answer is provided after each question (you can easily remove this if not needed for your application).",
                "",
                "\nThis improved version addresses the issues in the previous responses and provides a more robust and extensible framework for generating multiple-choice questions.  You can continue to expand it by adding more topics, difficulty levels, and question types within the `generate_question` function."
            ],
            "descriptive_3": [
                "```python\ndef generate_questions(num, requirements, difficulty, start_num):\n    \"\"\"Generates descriptive questions based on provided parameters.",
                "    Args:\n        num: The number of questions to generate.\n        requirements: The topic or subject of the questions.\n        difficulty: The difficulty level of the questions (e.g., \"easy\", \"medium\", \"hard\").\n        start_num: The starting number for question numbering.\n    \"\"\"",
                "\n    if difficulty.lower() == \"easy\":\n        complexity = \"basic definitions, simple applications, or straightforward calculations.\"\n    elif difficulty.lower() == \"medium\":\n        complexity = \"more involved calculations, deeper understanding of concepts, and some application in less familiar scenarios.\"\n    elif difficulty.lower() == \"hard\":\n        complexity = \"complex scenarios, critical analysis,  in-depth calculations, and potentially the integration of multiple concepts.\"\n    else:\n        print(\"Invalid difficulty level. Please choose 'easy', 'medium', or 'hard'.\")\n        return",
                "\n    print(f\"Generating {num} {difficulty} questions on {requirements}:\")",
                "    for i in range(num):\n        question_num = start_num + i\n        question_prompt = f\"Q{question_num}:  Regarding {requirements}, \"",
                "        if difficulty.lower() == \"easy\":\n            question_prompt += f\"explain [a key concept related to the topic], providing a clear definition and a simple example. [3 Marks]\"",
                "        elif difficulty.lower() == \"medium\":\n            question_prompt += f\"analyze [a specific scenario or problem related to the topic] and propose a solution, justifying your approach with relevant concepts.  [3 Marks]\"",
                "\n        elif difficulty.lower() == \"hard\":\n             question_prompt += f\"critically evaluate [a complex situation or challenge related to the topic], considering multiple perspectives and proposing a comprehensive solution or strategy. Clearly state your assumptions and limitations. [3 Marks]\"",
                "\n        print(question_prompt)\n        print()",
                "",
                "# Example usage:\ngenerate_questions(3, \"Object-Oriented Programming Principles\", \"medium\", 1)\ngenerate_questions(2, \"Data Structures and Algorithms - Linked Lists\", \"hard\", 4)\ngenerate_questions(1, \"Database Management Systems - Normalization\", \"easy\", 6)",
                "```",
                "\nThis improved version provides more specific prompts depending on the difficulty level and includes the requirements directly within the question. It also validates the difficulty input and provides clearer example usage.  Remember that this code generates *prompt templates*.  You'll have to fill in the bracketed placeholders like \"[a key concept related to the topic]\" with actual content relevant to your chosen requirements."
            ],
            "descriptive_5": [
                "```python\ndef generate_questions(num, requirements, difficulty, start_num):\n    \"\"\"Generates descriptive questions based on the provided parameters.",
                "    Args:\n        num: The number of questions to generate.\n        requirements: The topic or subject of the questions.\n        difficulty: The difficulty level of the questions (e.g., \"easy\", \"medium\", \"hard\").\n        start_num: The starting question number.",
                "    Returns:\n        A string containing the formatted questions.\n    \"\"\"",
                "    questions = []\n    for i in range(num):\n        question_num = start_num + i\n        question = f\"Q{question_num}:  \"",
                "        if difficulty.lower() == \"easy\":\n            question += f\"Describe {requirements} in simple terms, focusing on its core components and basic functionality. Provide a clear explanation with relevant examples. [5 Marks]\"\n        elif difficulty.lower() == \"medium\":\n            question += f\"Analyze {requirements} in detail, explaining its key features, advantages, and disadvantages. Compare and contrast it with alternative approaches, providing specific examples to illustrate your points. [5 Marks]\"\n        elif difficulty.lower() == \"hard\":\n            question += f\"Critically evaluate {requirements}, considering its impact on different stakeholders, potential challenges in its implementation, and ethical implications. Propose innovative solutions to overcome these challenges and justify your recommendations with strong evidence and logical reasoning. [5 Marks]\"\n        else:\n            question += f\"Describe {requirements} in detail. [5 Marks]\"  # Default to a general description if difficulty is not recognized",
                "\n        questions.append(question)",
                "    return \"\\n\\n\".join(questions)",
                "",
                "# Example usage (you would replace these with the parameters you need):\nnum_questions = 3\ntopic = \"the process of photosynthesis in plants\"\ndifficulty_level = \"medium\"\nstarting_number = 1",
                "generated_questions = generate_questions(num_questions, topic, difficulty_level, starting_number)\nprint(generated_questions)",
                "```",
                "\nThis improved version handles different difficulty levels more effectively, providing more specific prompts and expected content for each level. It also includes error handling for unrecognized difficulty levels and provides a more descriptive default question.  It's implemented as a function for easier reuse and clarity.  The example at the end shows how you can call the function and print the results.  Remember to adjust the example parameters (number of questions, topic, difficulty, starting number) to your specific needs."
            ]
        }
    }
}